# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.app import mcp
from tapir_archicad_mcp.context import multi_conn_instance

from multiconn_archicad.models.commands import (
    GetCurrentRevisionChangesOfLayoutsParameters,
GetCurrentRevisionChangesOfLayoutsResult,
GetDocumentRevisionsResult,
GetRevisionChangesOfElementsParameters,
GetRevisionChangesOfElementsResult,
GetRevisionChangesResult
)


log = logging.getLogger()


@mcp.tool(
    name="revisions_get_current_revision_changes_of_layouts",
    title="GetCurrentRevisionChangesOfLayouts",
    description="Retrieves all changes belong to the last revision of the given layouts."
)
def get_current_revision_changes_of_layouts(port: int, params: GetCurrentRevisionChangesOfLayoutsParameters) -> GetCurrentRevisionChangesOfLayoutsResult:
    """
    Retrieves all changes belong to the last revision of the given layouts.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_current_revision_changes_of_layouts tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetCurrentRevisionChangesOfLayouts",
            parameters=params.model_dump(mode='json')
        )
        return GetCurrentRevisionChangesOfLayoutsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetCurrentRevisionChangesOfLayouts result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetCurrentRevisionChangesOfLayouts on port {port}: {e}")
        raise e



@mcp.tool(
    name="revisions_get_document_revisions",
    title="GetDocumentRevisions",
    description="Retrieves all document revisions."
)
def get_document_revisions(port: int) -> GetDocumentRevisionsResult:
    """
    Retrieves all document revisions.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_document_revisions tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetDocumentRevisions",
            parameters={}
        )
        return GetDocumentRevisionsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetDocumentRevisions result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetDocumentRevisions on port {port}: {e}")
        raise e



@mcp.tool(
    name="revisions_get_revision_changes",
    title="GetRevisionChanges",
    description="Retrieves all changes."
)
def get_revision_changes(port: int) -> GetRevisionChangesResult:
    """
    Retrieves all changes.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_revision_changes tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetRevisionChanges",
            parameters={}
        )
        return GetRevisionChangesResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetRevisionChanges result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetRevisionChanges on port {port}: {e}")
        raise e



@mcp.tool(
    name="revisions_get_revision_changes_of_elements",
    title="GetRevisionChangesOfElements",
    description="Retrieves the changes belong to the given elements."
)
def get_revision_changes_of_elements(port: int, params: GetRevisionChangesOfElementsParameters) -> GetRevisionChangesOfElementsResult:
    """
    Retrieves the changes belong to the given elements.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_revision_changes_of_elements tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetRevisionChangesOfElements",
            parameters=params.model_dump(mode='json')
        )
        return GetRevisionChangesOfElementsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetRevisionChangesOfElements result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetRevisionChangesOfElements on port {port}: {e}")
        raise e
