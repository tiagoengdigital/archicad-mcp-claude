# This file is auto-generated by generate_tools.py. DO NOT EDIT.
import logging
from pydantic import ValidationError
from multiconn_archicad.basic_types import Port
from tapir_archicad_mcp.app import mcp
from tapir_archicad_mcp.context import multi_conn_instance

from multiconn_archicad.models.commands import (
    GetDatabaseIdFromNavigatorItemIdParameters,
GetDatabaseIdFromNavigatorItemIdResult,
GetModelViewOptionsResult,
GetView2DTransformationsParameters,
GetView2DTransformationsResult,
GetViewSettingsParameters,
GetViewSettingsResult,
PublishPublisherSetParameters,
SetViewSettingsParameters,
SetViewSettingsResult,
UpdateDrawingsParameters
)


log = logging.getLogger()


@mcp.tool(
    name="navigator_get_database_id_from_navigator_item_id",
    title="GetDatabaseIdFromNavigatorItemId",
    description="Gets the ID of the database associated with the supplied navigator item id"
)
def get_database_id_from_navigator_item_id(port: int, params: GetDatabaseIdFromNavigatorItemIdParameters) -> GetDatabaseIdFromNavigatorItemIdResult:
    """
    Gets the ID of the database associated with the supplied navigator item id

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_database_id_from_navigator_item_id tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetDatabaseIdFromNavigatorItemId",
            parameters=params.model_dump(mode='json')
        )
        return GetDatabaseIdFromNavigatorItemIdResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetDatabaseIdFromNavigatorItemId result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetDatabaseIdFromNavigatorItemId on port {port}: {e}")
        raise e



@mcp.tool(
    name="navigator_get_model_view_options",
    title="GetModelViewOptions",
    description="Gets all model view options"
)
def get_model_view_options(port: int) -> GetModelViewOptionsResult:
    """
    Gets all model view options

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_model_view_options tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetModelViewOptions",
            parameters={}
        )
        return GetModelViewOptionsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetModelViewOptions result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetModelViewOptions on port {port}: {e}")
        raise e



@mcp.tool(
    name="navigator_get_view2_d_transformations",
    title="GetView2DTransformations",
    description="Get zoom and rotation of 2D views"
)
def get_view2_d_transformations(port: int, params: GetView2DTransformationsParameters) -> GetView2DTransformationsResult:
    """
    Get zoom and rotation of 2D views

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_view2_d_transformations tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetView2DTransformations",
            parameters=params.model_dump(mode='json')
        )
        return GetView2DTransformationsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetView2DTransformations result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetView2DTransformations on port {port}: {e}")
        raise e



@mcp.tool(
    name="navigator_get_view_settings",
    title="GetViewSettings",
    description="Gets the view settings of navigator items"
)
def get_view_settings(port: int, params: GetViewSettingsParameters) -> GetViewSettingsResult:
    """
    Gets the view settings of navigator items

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing get_view_settings tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="GetViewSettings",
            parameters=params.model_dump(mode='json')
        )
        return GetViewSettingsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for GetViewSettings result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing GetViewSettings on port {port}: {e}")
        raise e



@mcp.tool(
    name="navigator_publish_publisher_set",
    title="PublishPublisherSet",
    description="Performs a publish operation on the currently opened project. Only the given publisher set will be published."
)
def publish_publisher_set(port: int, params: PublishPublisherSetParameters) -> None:
    """
    Performs a publish operation on the currently opened project. Only the given publisher set will be published.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing publish_publisher_set tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="PublishPublisherSet",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for PublishPublisherSet result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing PublishPublisherSet on port {port}: {e}")
        raise e



@mcp.tool(
    name="navigator_set_view_settings",
    title="SetViewSettings",
    description="Sets the view settings of navigator items"
)
def set_view_settings(port: int, params: SetViewSettingsParameters) -> SetViewSettingsResult:
    """
    Sets the view settings of navigator items

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing set_view_settings tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        result_dict = conn_header.core.post_tapir_command(
            command="SetViewSettings",
            parameters=params.model_dump(mode='json')
        )
        return SetViewSettingsResult.model_validate(result_dict)

    except ValidationError as e:
        log.error(f"Validation error for SetViewSettings result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing SetViewSettings on port {port}: {e}")
        raise e



@mcp.tool(
    name="navigator_update_drawings",
    title="UpdateDrawings",
    description="Performs a drawing update on the given elements."
)
def update_drawings(port: int, params: UpdateDrawingsParameters) -> None:
    """
    Performs a drawing update on the given elements.

    To find a valid 'port' number, use the 'tapir_discovery_list_active_archicads' tool.
    """
    log.info(f"Executing update_drawings tool on port {port}")
    multi_conn = multi_conn_instance.get()
    target_port = Port(port)
    if target_port not in multi_conn.active:
        raise ValueError(f"Port {port} is not an active Archicad connection.")
    conn_header = multi_conn.active[target_port]
    try:

        conn_header.core.post_tapir_command(
            command="UpdateDrawings",
            parameters=params.model_dump(mode='json')
        )
        return None

    except ValidationError as e:
        log.error(f"Validation error for UpdateDrawings result: {e}")
        raise ValueError(f"Received an invalid response from the Archicad API: {e}")
    except Exception as e:
        log.error(f"Error executing UpdateDrawings on port {port}: {e}")
        raise e
